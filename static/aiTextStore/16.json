[
  "文章总结如下：\n\n本文记录了使用Vue3 + Vite和Node.ts的打包过程，解决了路径前后打包的问题。在Vue项目中，通过vite-plugin-env-compatible插件处理环境变量，并使用import.meta.env.VITE_BASE_URL配置路径。对比使用Webpack打包Node.ts，虽然功能相对不便，但通过ts-loader和webpack.config.js实现了基本打包。然而，Webpack在处理路径和静态资源上的灵活性不如Vite，需要手动调整线上路径和复制静态资源。",
  "本文记录了使用vue3+vite和node.ts的打包过程，为了解决路径前后打包的问题。在vue项目中使用import.meta.env.VITE_BASE_URL配置路径，而在node项目中使用webpack进行打包，但无法解决路径问题，需要手动更换。两种方案各有优缺点，需要根据具体情况选择适合的打包工具。",
  "本文记录了使用vue3+vite和node.ts的打包过程，为了解决路径前后打包的问题。使用vite需要安装vite-plugin-env-compatible插件，配置.env和.env.production文件，使用import.meta.env获取路径。而使用node+ts+webpack则需要安装webpack、ts-loader、typescript，配置webpack.config.js进行打包，运行指令编写package.json，补充删除js的代码。然而，webpack打包无法解决路径问题，需要手动更换路径。",
  "本文记录了使用vue3+vite和node.ts的打包过程，为了解决路径前后打包的问题。在vue项目中使用配置路径，安装vite的插件vite-plugin-env-compatible，配置.env和.env.production文件，使用import.meta.env.VITE_BASE_URL获取路径。在node+ts+webpack中，安装webpack、ts-loader、typescript，配置webpack.config.js，编写运行指令，补充删除js的代码。然而，使用webpack打包无法解决路径问题，需要手动更换线上路径。",
  "文章总结了使用vue3+vite和node.ts的打包过程，通过安装插件、配置环境变量、处理路径等步骤解决了前后打包的问题。对于node+ts+webpack的打包过程也进行了详细说明，但指出了无法解决路径问题、静态资源复制等缺点。建议使用vue3+vite进行打包，提高效率。",
  "本文记录了使用vue3+vite和node.ts的打包过程，为了解决路径前后打包的问题。在vue项目中使用配置路径，通过import.meta.env.VITE_BASE_URL获取接口路径。而在node+ts+webpack中，需要手动更换线上路径，无法解决路径问题。Webpack打包需要配置ts-loader处理ts文件，同时运行指令编写package.json，包括tsc、build、rmjs等。最终，无法解决路径问题和静态资源复制问题是缺点。",
  "文章总结了使用vue3+vite和node.ts进行打包的过程。针对路径前后打包的问题，通过配置插件和环境变量来解决。在vue项目中使用import.meta.env.VITE_BASE_URL来获取路径，在node项目中使用webpack进行打包，但无法解决路径问题，需要手动更换。最后提到了markdown组件可能会将中文内容转为英文。",
  "本文记录了使用vue3+vite和node.ts的打包过程，为了解决路径前后打包的问题。在vue项目中使用配置路径时，直接使用import.meta.env来获取路径。对于node+ts+webpack的打包过程，需要手动更换线上路径，无法解决路径问题，也无法将静态资源放入打包文件夹。",
  "本文记录了使用vue3+vite和node.ts的打包过程，为了解决路径前后打包的问题。对于vue3+ts+vite的打包过程，需要安装vite插件vite-plugin-env-compatible，并在配置文件中进行插件配置，同时在项目中使用import.meta.env来获取路径。对于node+ts+webpack的打包过程，需要安装webpack、ts-loader、typescript，并在webpack配置文件中处理ts文件，同时编写脚本来进行编译和打包操作。然而，使用webpack打包存在路径问题，需要手动更换线上路径，且无法将静态资源放入打包文件夹中。",
  "本文记录了使用vue3+vite和node.ts的打包过程，为了解决路径前后打包的问题。在vue3+ts+vite中，安装vite插件并配置路径，使用import.meta.env获取路径。在node+ts+webpack中，安装webpack、ts-loader、typescript，配置webpack并编写脚本。然后运行指令编写，包括tsc、build、rmjs等。最后总结了打包过程中的缺点，如无法解决路径问题和静态资源处理。"
]